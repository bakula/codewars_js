var t1 = [["10000.2","10000.102","20000.302","20000.302000000003"],["10000.16","10000.116","20000.276","20000.275999999998"],["10000.18","10000.118","20000.298","20000.298000000003"],["10000.22","10000.122","20000.342","20000.341999999997"],["10000.28","10000.128","20000.408","20000.408000000003"],["10000.32","10000.132","20000.452","20000.451999999997"],["10000.34","10000.134","20000.474","20000.474000000002"],["10000.42","10000.142","20000.562","20000.561999999998"],["10000.44","10000.144","20000.584","20000.584000000003"],["10000.48","10000.148","20000.628","20000.627999999997"],["10000.54","10000.154","20000.694","20000.694000000003"],["10000.58","10000.158","20000.738","20000.737999999998"],["10000.60","10000.160","20000.76","20000.760000000002"],["10000.63","10000.163","20000.793","20000.792999999998"],["10000.65","10000.165","20000.815","20000.815000000002"],["10000.68","10000.168","20000.848","20000.847999999998"],["10000.70","10000.170","20000.87","20000.870000000003"],["10000.84","10000.184","20001.024","20001.023999999998"],["10000.86","10000.186","20001.046","20001.046000000002"],["10000.89","10000.189","20001.079","20001.078999999998"],["10000.91","10000.191","20001.101","20001.101000000002"]];
var t2 = [["0.300000","000000.103","0.403","0.40299999999999997"],["0.300000","0.103","0.403","0.40299999999999997"],["0.3","0.103","0.403","0.40299999999999997"],["0.7","0.107","0.807","0.8069999999999999"],["0.9","0.109","1.009","1.0090000000000001"],["0.10","0.110","0.21","0.21000000000000002"],["0.12","0.112","0.232","0.23199999999999998"],["0.17","0.117","0.287","0.28700000000000003"],["0.21","0.121","0.331","0.33099999999999996"],["0.22","0.122","0.342","0.34199999999999997"],["0.28","0.128","0.408","0.40800000000000003"],["0.34","0.134","0.474","0.47400000000000003"],["0.41","0.141","0.551","0.5509999999999999"],["0.42","0.142","0.562","0.5619999999999999"],["0.54","0.154","0.694","0.6940000000000001"],["0.55","0.155","0.705","0.7050000000000001"],["0.56","0.156","0.716","0.7160000000000001"],["0.65","0.165","0.815","0.8150000000000001"],["0.66","0.166","0.826","0.8260000000000001"],["0.67","0.167","0.837","0.8370000000000001"],["0.68","0.168","0.848","0.8480000000000001"],["0.72","0.172","0.892","0.8919999999999999"],["0.74","0.174","0.914","0.9139999999999999"],["0.76","0.176","0.936","0.9359999999999999"],["0.77","0.177","0.947","0.9470000000000001"],["0.79","0.179","0.969","0.9690000000000001"],["0.81","0.181","0.991","0.9910000000000001"]];
describe("add", function(){
    it ("should add big positive numbers", function(){
      for(var i = 0;i<t1.length;i = i + Math.floor(Math.random()*5)){
        var v = t1[i];
        Test.expect(add(v[0],v[1])===v[2], v[0]+'+'+v[1]+" expect to be: '"+v[2]+"' got: "+add(v[0],v[1]));
      }
        
    });
    it ("should add small positive numbers", function(){
      for(var i = 0;i<t2.length;i = i + Math.floor(Math.random()*5)){
        var v = t2[i];
        Test.expect(add(v[0],v[1])===v[2], v[0]+'+'+v[1]+" expect to be: '"+v[2]+"' got: "+add(v[0],v[1]));
      }
        
    });
    it ("should add 3 or more numbers", function(){
      
        Test.expect(add(1,2,3,4,5)==='15', "1+2+3+4+5 expect to be:15 got: "+add(1,2,3,4,5));
        Test.expect(add(.1,.2,.3,.4,.5)==='1.5', ".1+.2+.3+.4+.5 expect to be:1.5 got: "+add(.1,.2,.3,.4,.5));
        var expect = 0;
        var arr=[];
        for(var i = 1;i<Math.random()*20;i++){
          arr.push(i);
          expect += i;
        }
        var ret = add.apply(this,arr);
        Test.expect(ret===expect.toString(), arr.join("+")+" expect to be:"+expect+" got: "+ret);
    });
    it ("should return NaN for not valid numbers", function(){
      
        Test.expect(isNaN(add('1.1.1','2','3','4','5')), "'1.1.1+2+3+4+5' expect to be: NaN got: "+add('1.1.1','2','3','4','5'));
        Test.expect(isNaN(add('a.1','b.2','.3','.4','.5')), "a.1+b.2+.3+.4+.5 expect to be: NaN got: "+add('a.1','b.2',.3,.4,.5));
        
    });
    
});